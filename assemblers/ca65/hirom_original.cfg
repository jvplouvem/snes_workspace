# 256k

SYMBOLS {
    __STACKSIZE__: type = weak, value = $100;
    __ZPADSIZE__:  type = weak, value = $10;
    __ZNMISIZE__:  type = weak, value = $10;
    __RPADSIZE__:  type = weak, value = $100;
}

MEMORY {
    ZPAD:       start = $000000, size = __ZPADSIZE__, define = yes;
    ZNMI:       start = __ZPADSIZE__, size = __ZNMISIZE__, define = yes;
    ZPAGE:      start = __ZPADSIZE__ + __ZNMISIZE__, size = $100 - (__ZPADSIZE__ + __ZNMISIZE__), define = yes;
    LORAM:      start = $000100, size = $1f00 - __STACKSIZE__, define = yes;
    STACK:      start = $002000 - __STACKSIZE__, size = __STACKSIZE__, define = yes;
    HIRAM:      start = $7e2000,    size = $e000, define = yes;
    EXRAM:      start = $7f0000,    size = $10000, define = yes;
	
	
	ROM0: start = $c00000, type = ro, size = $FC00, fill = yes;
	ROM0_code: start = $80FC00, type = ro, size = $0400, fill = yes;
	ROM1:      start =  $c10000, type = ro, size = $8000, fill = yes;
	ROM1_code: start =  $818000, type = ro, size = $8000, fill = yes;
	ROM2:      start =  $c20000, type = ro, size = $8000, fill = yes;
	ROM2_code: start =  $828000, type = ro, size = $8000, fill = yes;
	ROM3:      start =  $c30000, type = ro, size = $8000, fill = yes;
	ROM3_code: start =  $838000, type = ro, size = $8000, fill = yes;
	

    SMPZPAGE:   start = $0002, size = $00ee;
    SMPMMIO:    start = $00f0, size = $0010;
    SMPSTACK:   start = $0100, size = $0100;
    SMPRAM:     start = $0200, size = $fdc0;
}

SEGMENTS {
    ZPAD:       load = ZPAD,        type = zp,  optional = yes;
    ZNMI:       load = ZNMI,        type = zp,  optional = yes;
    ZEROPAGE:   load = ZPAGE,       type = zp,  optional = yes;
    BSS:        load = LORAM,       type = bss, optional = yes;
    LORAM:      load = LORAM,       type = bss, optional = yes;
    HIRAM:      load = HIRAM,       type = bss, optional = yes;
    EXRAM:      load = EXRAM,       type = bss, optional = yes;

    CODE:	 load = ROM0_code,	type = ro;
    RODATA:  load = ROM0,	type = ro, optional = yes;
	RODATA1:     load = ROM1,        type = ro, optional = yes;
    SMPCODE:    load = ROM0,        type = rw, run = SMPRAM, optional = yes, define = yes;
    HEADER:     load = ROM0_code,        type = ro, start = $80ffb0;
    VECTORS:    load = ROM0_code,        type = ro, start = $80ffe0;
    

    SMPZPAGE:   load = SMPZPAGE,    type = zp, optional = yes;
    SMPRAM:     load = SMPRAM,      type = bss, optional = yes;
}